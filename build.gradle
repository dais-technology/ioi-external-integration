buildscript {
    ext {
        springBootVersion = '2.1.6.RELEASE'
    }

    repositories {
        mavenCentral()
        maven {
            url "${artifactory_contextUrl}/gradle-release-local"
            credentials {
                username = "${artifactory_user}"
                password = "${artifactory_password}"
            }
        }
        mavenLocal()
    }
    dependencies {
        classpath "com.softwaresecured.reshift:gradle-plugin:1.+"
        classpath "se.transmode.gradle:gradle-docker:1.2"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4+"
        classpath "org.postgresql:postgresql:9.4.1212.jre7"
        classpath "com.dais:gradle-release-plugin:1.0.+"
    }
}

plugins {
    id "com.adarshr.test-logger" version "2.1.1"
    id "io.franzbecker.gradle-lombok" version "3.2.0"
    id "io.spring.dependency-management" version "1.0.8.RELEASE"
    id "org.flywaydb.flyway" version "5.2.4"
}

apply plugin: "java"
apply plugin: "docker"
apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "org.springframework.boot"
apply plugin: "maven-publish"
apply plugin: "com.jfrog.artifactory"
apply plugin: "com.dais.gradle.release"
apply plugin: "jacoco"

group = "com.dais"

jar {
    baseName = rootProject.name
}

sourceCompatibility = 1.8

ext {
    springCloudVersion = "Greenwich.SR3"
    domainGlob = "**/domain/**/*"
    clientSdkArtifactName = "${jar.baseName}-domain"
    jacocoVersion = "0.8.3"
}


ext["jackson.version"] = "2.9.7"
ext["flyway.version"] = "5.2.4"

repositories {
    mavenCentral()
    mavenLocal()
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}
configurations {
    all*.exclude group: "com.netflix.feign"
    all*.exclude group: "junit"
}
dependencies {
    implementation( 'com.amazonaws:aws-java-sdk-s3:1.11.426' )

    implementation( "com.dais:commons-jackson-autoconfiguration:0.0.1" )
    implementation( "com.dais:commons-jwt-utils:2.1.4" )
    implementation( "com.dais:commons-microservice-logging:1.0.3" )
    implementation( "com.dais:commons-microservice-rest-clients:1.0.3" )

    implementation( "com.dais:commons-spring-security-jwt-autoconfiguration:2.1.5" )
    implementation( "com.dais:dais-commons:7.1.1" )
    implementation( "com.dais:ioi-action-service-domain:0.0.841" )
    implementation( "com.dais:ioi-report-service-domain:0.0.31" )
    implementation( "com.dais:user-management-domain:1.0.60" )

    implementation( "io.springfox:springfox-swagger2:2.9.2+" )
    implementation( "io.springfox:springfox-swagger-ui:2.9.2+" )
    implementation( "com.vladmihalcea:hibernate-types-52:2.4.4" )

    implementation( "org.flywaydb:flyway-core" )
    implementation( "org.postgresql:postgresql:42.2.14" )
    implementation( "org.projectlombok:lombok:1.18.6" )

    implementation( "com.jayway.jsonpath:json-path:2.4.0" )

    implementation( "org.springframework.boot:spring-boot-starter-actuator" )
    implementation( "org.springframework.boot:spring-boot-starter-aop" )

    implementation( "org.springframework.boot:spring-boot-starter-security" )
    implementation( "org.springframework.boot:spring-boot-starter-web" )
    implementation( "org.springframework.boot:spring-boot-starter-quartz" )
    implementation( "org.springframework.cloud:spring-cloud-starter-openfeign" )
    implementation( "org.springframework.cloud:spring-cloud-starter-netflix-ribbon" )
    implementation( "org.springframework:spring-context-support" )
    implementation( "net.rakugakibox.spring.boot:orika-spring-boot-starter:1.8.0" )
    implementation( "org.apache.commons:commons-collections4:4.4" )


    implementation( 'com.dais:ioi-quote-service-domain:0.0.113' )
    compile( 'com.dais:dais-commons:7.1.+' )
    compile( 'com.dais:dais-commons:7.1.+' )
    compile( 'com.dais:commons-ioi:0.0.54' )
    compile( 'com.dais:commons-jwt-utils:2.1.4' )
    compile( 'com.dais:commons-microservice-logging:1.0.3' )
    compile( 'com.dais:commons-microservice-rest-clients:1.0.3' )
    compile( 'com.dais:commons-spring-security-jwt-autoconfiguration:2.1.5' )
    compile( 'com.dais:commons-microservice-exceptions:1.0.0' )
    implementation( "com.dais:commons-spring-data-jpa-autoconfiguration:0.0.1" )
    compile( 'com.dais:ioi-plugin-service-domain:0.0.148' )
    compile( 'com.dais:ioi-policy-service-domain:0.0.304' )
    implementation( 'org.skyscreamer:jsonassert:1.5.0' )


    testImplementation( "com.dais:test-utils:0.0.6" )
    testImplementation( "com.dais:commons-jwt-spring-testing-utils:0.0.9" )
    testImplementation( "com.nimbusds:nimbus-jose-jwt:6.1.1" )
    testImplementation( "org.junit.jupiter:junit-jupiter:5.4.2" )
    testImplementation( "org.junit.jupiter:junit-jupiter-params:5.4.2" )
    testImplementation( "org.springframework.boot:spring-boot-starter-test" )
    compile( 'org.springframework.boot:spring-boot-starter-data-jpa' )

    testImplementation( "org.springframework.security:spring-security-test" )
}

task codenarcMain() {
    //does Nothing, this is a temporary "workaround" so jenkins can skip the task, despite not using the codenarc plugin for java projects
}

task codenarcTest() {
    //does Nothing, this is a temporary "workaround" so jenkins can skip the task, despite not using the codenarc plugin for java projects
}

task buildDocker( type: Docker, dependsOn: build ) {
    // An entry must be set for docker_registry_url in ~/.gradle/docker.properties

    push = false
    applicationName = jar.baseName
    dockerfile = file( "src/main/docker/Dockerfile" )
    tag = "${docker_registry_url}/${rootProject.name}"
    doFirst {
        copy {
            from jar
            into stageDir
        }
    }
}

task pushDocker( type: Docker, dependsOn: build ) {
    // An entry must be set for docker_registry_url in ~/.gradle/docker.properties

    push = true
    applicationName = jar.baseName
    dockerfile = file( "src/main/docker/Dockerfile" )
    tag = "${docker_registry_url}/${rootProject.name}"
    doFirst {
        copy {
            from jar
            into stageDir
        }
    }
}

task sourceJar( type: Jar ) {
    from sourceSets.main.allJava
    classifier "sources"
    version release.version
}


task domainJar( type: Jar, dependsOn: classes ) {
    baseName clientSdkArtifactName
    from sourceSets.main.output
    include domainGlob
    includeEmptyDirs false
    version release.version

    doLast {
        println "Generated Client SDK artifact:\n" +
                "${project.group}:${clientSdkArtifactName}:${version}"
    }
}

artifactory {
    contextUrl = "${artifactory_contextUrl}"   //The base Artifactory URL if not overridden by the publisher/resolver
    publish {
        repository {
            repoKey = "gradle-release-local"
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true
        }
        defaults {
            publications "domain"
        }
    }
    resolve {
        repository {
            repoKey = "gradle-dev"
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true
        }
    }
}
jacoco {
    toolVersion = jacocoVersion
    reportsDir = file( "$buildDir/jacoco-reports" )
}
jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.destination file( "${buildDir}/jacocoHtml" )
    }
}
publishing {
    publications {
        domain( MavenPublication ) {
            artifactId clientSdkArtifactName
            artifacts = [domainJar, sourceJar]
        }
    }
}
test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    failFast = true
}

allprojects {
    apply plugin: "com.softwaresecured.reshift"
}
